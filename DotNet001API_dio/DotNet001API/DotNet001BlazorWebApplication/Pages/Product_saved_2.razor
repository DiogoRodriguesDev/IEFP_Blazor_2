@*@page "/produtos"
@using DotNet001Shared;
@using DotNet001Shared.Models;
@using Interfaces;
@using System.Diagnostics;
@inject IWebServiceAPI WebServiceAPI

@if (ProductsData is not null && ProductsData.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Preço</th>
                <th>Descrição</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in ProductsData)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Price.ToString("C")</td>
                    <td>@product.Description</td>
                    <td>
                        <button class="btn btn-primary" @onclick="@(() => EditProduct(product))">Editar</button>
                        <button class="btn btn-danger" @onclick="@(() => DeleteProduct(product.Id))">Apagar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<h2>Criar novo produto</h2>

<EditForm Model="@NewProduct" OnValidSubmit="CreateNewProduct">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Nome:</label>
        <InputText id="name" class="form-control" @bind-Value="@NewProduct.Name" />
    </div>

    <div class="form-group">
        <label for="price">Preço:</label>
        <InputNumber id="price" class="form-control" @bind-Value="@NewProduct.Price" step="0.01" />
    </div>

    <div class="form-group">
        <label for="description">Descrição:</label>
        <InputTextArea id="description" class="form-control" @bind-Value="@NewProduct.Description" />
    </div>

    <button type="submit" class="btn btn-primary">Criar</button>
</EditForm>

@code {
    List<Product> ProductsData { get; set; } = new();
    Product NewProduct { get; set; } = new Product();

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsData();
    }

    private async Task LoadProductsData()
    {
        try
        {
            var response = await WebServiceAPI.GetProducts();
            ProductsData = response;
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    private async Task CreateNewProduct()
    {
        try
        {
            var response = await WebServiceAPI.CreateProduct(NewProduct);
            ProductsData.Add(response);
            NewProduct = new Product();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    private async Task EditProduct(Product product)
    {
        try
        {
            var response = await WebServiceAPI.UpdateProduct(product.Id, product);
            var index = ProductsData.FindIndex(p => p.Id == response.Id);
            ProductsData[index] = response;
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    private async Task DeleteProduct(int productId)
    {
        try
        {
            await WebServiceAPI.DeleteProduct(productId);
            ProductsData.RemoveAll(p => p.Id == productId);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }
}*@